import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, FSInputFile
from config import TOKEN, API_KEY
import random
import requests
import os
from gtts import gTTS
from googletrans import Translator

bot = Bot(token=TOKEN)
dp = Dispatcher()

# API –∫–ª—é—á –¥–ª—è OpenWeatherMap
OWM_API_KEY = API_KEY

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
translator = Translator()

if not os.path.exists('img'):
    os.makedirs('img')


@dp.message(Command('video'))
async def video(message: Message):
    await bot.send_chat_action(message.chat.id, 'upload_video')
    video = FSInputFile('video.mp4')
    await bot.send_video(message.chat.id, video)


@dp.message(Command('audio'))
async def audio(message: Message):
    audio = FSInputFile('sound2.mp3')
    await bot.send_audio(message.chat.id, audio)


@dp.message(Command('training'))
async def training(message: Message):
    training_list = [
        "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 1:\\n1. –°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 15 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\\n2. –í–µ–ª–æ—Å–∏–ø–µ–¥: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 20 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π (–∫–∞–∂–¥–∞—è —Å—Ç–æ—Ä–æ–Ω–∞)\\n3. –ü–ª–∞–Ω–∫–∞: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 30 —Å–µ–∫—É–Ω–¥",
        "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 2:\\n1. –ü–æ–¥—ä–µ–º—ã –Ω–æ–≥: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 15 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\\n2. –†—É—Å—Å–∫–∏–π —Ç–≤–∏—Å—Ç: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 20 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π (–∫–∞–∂–¥–∞—è —Å—Ç–æ—Ä–æ–Ω–∞)\\n3. –ü–ª–∞–Ω–∫–∞ —Å –ø–æ–¥–Ω—è—Ç–æ–π –Ω–æ–≥–æ–π: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 20 —Å–µ–∫—É–Ω–¥ (–∫–∞–∂–¥–∞—è –Ω–æ–≥–∞)",
        "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 3:\\n1. –°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è —Å –ø–æ–¥–Ω—è—Ç—ã–º–∏ –Ω–æ–≥–∞–º–∏: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 15 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\\n2. –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –Ω–æ–∂–Ω–∏—Ü—ã: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 20 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\\n3. –ë–æ–∫–æ–≤–∞—è –ø–ª–∞–Ω–∫–∞: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 20 —Å–µ–∫—É–Ω–¥ (–∫–∞–∂–¥–∞—è —Å—Ç–æ—Ä–æ–Ω–∞)"
    ]
    rand_tr = random.choice(training_list)
    await message.answer(f"–≠—Ç–æ –≤–∞—à–∞ –º–∏–Ω–∏-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è {rand_tr}")
    tts = gTTS(text=rand_tr, lang='ru')
    tts.save("training.ogg")
    audio = FSInputFile('training.ogg')
    await bot.send_voice(message.chat.id, audio)
    os.remove("training.ogg")


@dp.message(Command('doc'))
async def doc(message: Message):
    doc = FSInputFile("doc.pdf")
    await bot.send_document(message.chat.id, doc)


@dp.message(Command('voice'))
async def voice(message: Message):
    voice = FSInputFile("sample.ogg")
    await message.answer_voice(voice)


@dp.message(F.photo)
async def react_photo(message: Message):
    responses = ['–û–≥–æ, –∫–∞–∫–∞—è —Ñ–æ—Ç–∫–∞!', '–ù–µ–ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ', '–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π –º–Ω–µ —Ç–∞–∫–æ–µ –±–æ–ª—å—à–µ']
    rand_answ = random.choice(responses)
    await message.answer(rand_answ)
    await bot.download(message.photo[-1], destination=f'img/{message.photo[-1].file_id}.jpg')


@dp.message(Command('photos', prefix='&'))
async def photo(message: Message):
    photo_urls = [
        'https://i.pinimg.com/originals/d6/d6/0c/d6d60cd014d95b15a5a44cc0597f5947.jpg',
        'https://i.pinimg.com/736x/e6/9b/6f/e69b6feb89a524682cf149d527026893.jpg',
        'https://i.pinimg.com/originals/b5/90/b2/b590b2ed84ff824dd6276fe56b901c13.jpg'
    ]
    rand_photo = random.choice(photo_urls)
    await message.answer_photo(photo=rand_photo, caption='–≠—Ç–æ —Å—É–ø–µ—Ä –∫—Ä—É—Ç–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞')


@dp.message(F.text == "—á—Ç–æ —Ç–∞–∫–æ–µ –ò–ò?")
async def aitext(message: Message):
    await message.answer(
        '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç ‚Äî —ç—Ç–æ —Å–≤–æ–π—Å—Ç–≤–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ —Å—á–∏—Ç–∞—é—Ç—Å—è –ø—Ä–µ—Ä–æ–≥–∞—Ç–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫–∞; –Ω–∞—É–∫–∞ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω, –æ—Å–æ–±–µ–Ω–Ω–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º')


@dp.message(Command('weather'))
async def handle_weather(message: Message):
    await message.answer("üå§Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã")


@dp.message(Command('translate'))
async def translate_command(message: Message):
    await message.answer("üîÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫")


def translate_to_english(text):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        detected = translator.detect(text)

        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —É–∂–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
        if detected.lang == 'en':
            return f"üîÑ –¢–µ–∫—Å—Ç —É–∂–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ:\n{text}"

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        translated = translator.translate(text, dest='en')

        return f"üîÑ *–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π:*\n\nüìù *–û—Ä–∏–≥–∏–Ω–∞–ª ({detected.lang}):*\n{text}\n\nüá∫üá∏ *–ü–µ—Ä–µ–≤–æ–¥:*\n{translated.text}"

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}"


def get_weather_info(city):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ"""
    try:
        url = f'http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OWM_API_KEY}&units=metric&lang=ru'
        response = requests.get(url, timeout=5)

        if response.status_code != 200:
            return "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"

        data = response.json()
        temp = data['main']['temp']
        desc = data['weather'][0]['description']
        humidity = data['main']['humidity']
        wind = data['wind']['speed']

        return f"üå§Ô∏è *–ü–æ–≥–æ–¥–∞ –≤ {city}:*\nüå°Ô∏è {temp}¬∞C, {desc}\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\nüí® –í–µ—Ç–µ—Ä: {wind} –º/—Å"

    except Exception as e:
        return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã"


@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç–∏–∫–∏, {message.from_user.first_name}!')


@dp.message(Command('help'))
async def help(message: Message):
    await message.answer(
        "–≠—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã:\n/start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n/help - –ø–æ–º–æ—â—å\n/photo - —Ñ–æ—Ç–æ\n/weather - –ø–æ–≥–æ–¥–∞\n/translate - –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞\n\n–¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ:\n‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã\n‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text)
async def handle_text(message: Message):
    text = message.text.strip()

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if text.startswith('/') or text == "—á—Ç–æ —Ç–∞–∫–æ–µ –ò–ò?":
        return

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if len(text) < 2:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ —ç—Ç–æ –±—ã—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–≥–æ–¥—ã
    # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤) –±–µ–∑ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
    if len(text) <= 30 and not any(char in text for char in '.,!?;:"\'()[]{}'):
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É
        weather_info = get_weather_info(text)

        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–∞–π–¥–µ–Ω (–Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "–Ω–µ –Ω–∞–π–¥–µ–Ω"), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≥–æ–¥—É
        if "–Ω–µ –Ω–∞–π–¥–µ–Ω" not in weather_info.lower():
            await message.answer(weather_info, parse_mode='Markdown')
            return

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
    translation = translate_to_english(text)
    await message.answer(translation, parse_mode='Markdown')


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())