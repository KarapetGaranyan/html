import asyncio
import requests
import random
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

from config import TOKEN, NASA_API_KEY, THE_CAT_API_KEY, WEATHER_API_KEY, QUOTES_API_KEY

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class WeatherStates(StatesGroup):
    waiting_for_city = State()


class QuoteStates(StatesGroup):
    waiting_for_category = State()


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üê± –ö–æ—à–∫–∏", callback_data="cats_menu")],
        [InlineKeyboardButton(text="üåå NASA APOD", callback_data="nasa_apod")],
        [InlineKeyboardButton(text="üå§Ô∏è –ü–æ–≥–æ–¥–∞", callback_data="weather")],
        [InlineKeyboardButton(text="üí≠ –¶–∏—Ç–∞—Ç—ã", callback_data="quotes")],
        [InlineKeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ", callback_data="random_number")],
        [InlineKeyboardButton(text="üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ", callback_data="bot_info")]
    ])
    return keyboard


# –ú–µ–Ω—é –¥–ª—è –∫–æ—à–µ–∫
def get_cats_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üê± –°–ª—É—á–∞–π–Ω–∞—è –∫–æ—à–∫–∞", callback_data="random_cat")],
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ –ø–æ—Ä–æ–¥–µ", callback_data="search_breed")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–¥", callback_data="list_breeds")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    return keyboard


# ========== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° API ==========

# NASA API —Ñ—É–Ω–∫—Ü–∏–∏
def get_random_apod():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ APOD –æ—Ç NASA"""
    end_date = datetime.now()
    start_date = end_date - timedelta(days=365)
    random_date = start_date + (end_date - start_date) * random.random()
    date_str = random_date.strftime("%Y-%m-%d")

    url = f'https://api.nasa.gov/planetary/apod?api_key={NASA_API_KEY}&date={date_str}'

    try:
        response = requests.get(url, timeout=10)
        return response.json()
    except requests.RequestException:
        return None


def get_today_apod():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ APOD –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    url = f'https://api.nasa.gov/planetary/apod?api_key={NASA_API_KEY}'

    try:
        response = requests.get(url, timeout=10)
        return response.json()
    except requests.RequestException:
        return None


# Cat API —Ñ—É–Ω–∫—Ü–∏–∏
def get_cat_breeds():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ—Ä–æ–¥ –∫–æ—à–µ–∫"""
    url = "https://api.thecatapi.com/v1/breeds"
    headers = {"x-api-key": THE_CAT_API_KEY}

    try:
        response = requests.get(url, headers=headers, timeout=10)
        return response.json()
    except requests.RequestException:
        return []


def get_random_cat():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∫–æ—à–∫–∏"""
    url = "https://api.thecatapi.com/v1/images/search"
    headers = {"x-api-key": THE_CAT_API_KEY}

    try:
        response = requests.get(url, headers=headers, timeout=10)
        data = response.json()
        return data[0]['url'] if data else None
    except requests.RequestException:
        return None


def get_cat_image_by_breed(breed_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∫–æ—à–∫–∏ –ø–æ –ø–æ—Ä–æ–¥–µ"""
    url = f"https://api.thecatapi.com/v1/images/search?breed_ids={breed_id}"
    headers = {"x-api-key": THE_CAT_API_KEY}

    try:
        response = requests.get(url, headers=headers, timeout=10)
        data = response.json()
        return data[0]['url'] if data else None
    except requests.RequestException:
        return None


def get_breed_info(breed_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Ä–æ–¥–µ –∫–æ—à–µ–∫"""
    breeds = get_cat_breeds()
    for breed in breeds:
        if breed['name'].lower() == breed_name.lower():
            return breed
    return None


# –ü–æ–≥–æ–¥–∞ API (OpenWeatherMap)
def get_weather(city):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ"""
    url = f"http://api.openweathermap.org/data/2.5/weather"
    params = {
        'q': city,
        'appid': WEATHER_API_KEY,
        'units': 'metric',
        'lang': 'ru'
    }

    try:
        response = requests.get(url, params=params, timeout=10)
        return response.json()
    except requests.RequestException:
        return None


# –¶–∏—Ç–∞—Ç—ã API (–Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
def get_random_quote():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""

    # –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –∫–∞–∫ fallback
    local_quotes = [
        {"content": "–ë—É–¥—å —Å–æ–±–æ–π. –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ —É–∂–µ –∑–∞–Ω—è—Ç—ã.", "author": "–û—Å–∫–∞—Ä –£–∞–π–ª—å–¥"},
        {"content": "–ñ–∏–∑–Ω—å ‚Äî —ç—Ç–æ —Ç–æ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –ø–æ–∫–∞ —Ç—ã —Å—Ç—Ä–æ–∏—à—å –ø–ª–∞–Ω—ã.", "author": "–î–∂–æ–Ω –õ–µ–Ω–Ω–æ–Ω"},
        {"content": "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–µ–ª–∞—Ç—å –æ—Ç–ª–∏—á–Ω—É—é —Ä–∞–±–æ—Ç—É ‚Äî –ª—é–±–∏—Ç—å —Ç–æ, —á—Ç–æ –¥–µ–ª–∞–µ—à—å.", "author": "–°—Ç–∏–≤ –î–∂–æ–±—Å"},
        {"content": "–ë—É–¥—É—â–µ–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–º, –∫—Ç–æ –≤–µ—Ä–∏—Ç –≤ –∫—Ä–∞—Å–æ—Ç—É —Å–≤–æ–∏—Ö –º–µ—á—Ç–∞–Ω–∏–π.", "author": "–≠–ª–µ–∞–Ω–æ—Ä –†—É–∑–≤–µ–ª—å—Ç"},
        {"content": "–£—Å–ø–µ—Ö ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏–¥—Ç–∏ –æ—Ç –Ω–µ—É–¥–∞—á–∏ –∫ –Ω–µ—É–¥–∞—á–µ, –Ω–µ —Ç–µ—Ä—è—è —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞.",
         "author": "–£–∏–Ω—Å—Ç–æ–Ω –ß–µ—Ä—á–∏–ª–ª—å"},
        {"content": "–ù–µ –≤–∞–∂–Ω–æ, –Ω–∞—Å–∫–æ–ª—å–∫–æ –º–µ–¥–ª–µ–Ω–Ω–æ —Ç—ã –∏–¥–µ—à—å, –≥–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è.", "author": "–ö–æ–Ω—Ñ—É—Ü–∏–π"},
        {"content": "–õ—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ—Å–∞–¥–∫–∏ –¥–µ—Ä–µ–≤–∞ –±—ã–ª–æ 20 –ª–µ—Ç –Ω–∞–∑–∞–¥. –í—Ç–æ—Ä–æ–µ –ª—É—á—à–µ–µ –≤—Ä–µ–º—è ‚Äî —Å–µ–π—á–∞—Å.",
         "author": "–ö–∏—Ç–∞–π—Å–∫–∞—è –ø–æ—Å–ª–æ–≤–∏—Ü–∞"},
        {"content": "–ò–∑–º–µ–Ω–∏—Ç–µ —Å–≤–æ–∏ –º—ã—Å–ª–∏, –∏ –≤—ã –∏–∑–º–µ–Ω–∏—Ç–µ —Å–≤–æ–π –º–∏—Ä.", "author": "–ù–æ—Ä–º–∞–Ω –í–∏–Ω—Å–µ–Ω—Ç –ü–∏–ª"},
        {"content": "–î–æ—Ä–æ–≥—É –æ—Å–∏–ª–∏—Ç –∏–¥—É—â–∏–π.", "author": "–†—É—Å—Å–∫–∞—è –ø–æ—Å–ª–æ–≤–∏—Ü–∞"},
        {"content": "–ú–µ—á—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—à—å —Ç—ã.", "author": "–î–∂–æ–Ω –ö. –ú–∞–∫—Å–≤–µ–ª–ª"}
    ]

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É –∏–∑ API
    apis_to_try = [
        {
            "url": "https://zenquotes.io/api/random",
            "parser": lambda x: {"content": x[0]["q"], "author": x[0]["a"]} if x and isinstance(x, list) and len(
                x) > 0 else None
        },
        {
            "url": "https://api.quotable.io/random",
            "parser": lambda x: {"content": x["content"], "author": x["author"]} if x and "content" in x else None
        },
        {
            "url": "https://api.adviceslip.com/advice",
            "parser": lambda x: {"content": x["slip"]["advice"], "author": "–°–æ–≤–µ—Ç –¥–Ω—è"} if x and "slip" in x else None
        }
    ]

    for api in apis_to_try:
        try:
            response = requests.get(api["url"], timeout=5)
            if response.status_code == 200:
                data = response.json()
                parsed = api["parser"](data)
                if parsed:
                    return parsed
        except:
            continue

    # –ï—Å–ª–∏ –≤—Å–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ª–æ–∫–∞–ª—å–Ω—É—é —Ü–∏—Ç–∞—Ç—É
    return random.choice(local_quotes)


def get_inspirational_quote():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–π —Ü–∏—Ç–∞—Ç—ã"""
    inspirational_quotes = [
        {"content": "–í–µ—Ä—å—Ç–µ –≤ —Å–µ–±—è –∏ –≤ —Ç–æ, —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ–µ –≤–æ–∑–º–æ–∂–Ω—ã–º.",
         "author": "–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –º—É–¥—Ä–æ—Å—Ç—å"},
        {"content": "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —ç—Ç–æ –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å.", "author": "–ñ–∏–∑–Ω–µ–Ω–Ω–∞—è —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è"},
        {"content": "–°–∞–º—ã–µ —Ç–µ–º–Ω—ã–µ —á–∞—Å—ã –Ω–∞—Å—Ç—É–ø–∞—é—Ç –ø—Ä—è–º–æ –ø–µ—Ä–µ–¥ —Ä–∞—Å—Å–≤–µ—Ç–æ–º.", "author": "–¢–æ–º–∞—Å –§—É–ª–ª–µ—Ä"},
        {"content": "–ï—Å–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ –º–µ—á—Ç–∞—Ç—å –æ–± —ç—Ç–æ–º, –≤—ã –º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å.", "author": "–£–æ–ª—Ç –î–∏—Å–Ω–µ–π"},
        {"content": "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ ‚Äî —ç—Ç–æ —Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç–µ.",
         "author": "–¢–æ–Ω–∏ –†–æ–±–±–∏–Ω—Å"}
    ]

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â—É—é —Ü–∏—Ç–∞—Ç—É –∏–∑ API
    try:
        response = requests.get("https://zenquotes.io/api/today", timeout=5)
        if response.status_code == 200:
            data = response.json()
            if data and isinstance(data, list) and len(data) > 0:
                return {"content": data[0]["q"], "author": data[0]["a"]}
    except:
        pass

    return random.choice(inspirational_quotes)


# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==========

@dp.message(CommandStart())
async def start_command(message: Message):
    welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞!

–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:
üê± –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–∫–∞—Ö –∏ –∏—Ö –ø–æ—Ä–æ–¥–∞—Ö
üåå –ü—Ä–∏—Å—ã–ª–∞—Ç—å –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ç–æ –æ—Ç NASA
üå§Ô∏è –£–∑–Ω–∞–≤–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ
üí≠ –î–µ–ª–∏—Ç—å—Å—è –º—É–¥—Ä—ã–º–∏ —Ü–∏—Ç–∞—Ç–∞–º–∏
üé≤ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞

–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
    """
    await message.answer(welcome_text, reply_markup=get_main_menu())


@dp.message(Command("help"))
async def help_command(message: Message):
    help_text = """
üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/random_cat - –°–ª—É—á–∞–π–Ω–∞—è –∫–æ—à–∫–∞
/random_apod - –°–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ –∫–æ—Å–º–æ—Å–∞
/weather - –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É
/quote - –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞
/inspiration - –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∞—è —Ü–∏—Ç–∞—Ç–∞

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é!
    """
    await message.answer(help_text)


# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK –ó–ê–ü–†–û–°–û–í ==========

@dp.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: CallbackQuery):
    await callback.message.edit_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:",
        reply_markup=get_main_menu()
    )


@dp.callback_query(F.data == "cats_menu")
async def cats_menu_callback(callback: CallbackQuery):
    await callback.message.edit_text(
        "üê± –ú–µ–Ω—é –∫–æ—à–µ–∫\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_cats_menu()
    )


@dp.callback_query(F.data == "random_cat")
async def random_cat_callback(callback: CallbackQuery):
    cat_url = get_random_cat()
    if cat_url:
        await callback.message.answer_photo(
            photo=cat_url,
            caption="üê± –°–ª—É—á–∞–π–Ω–∞—è –∫–æ—à–µ—á–∫–∞ –¥–ª—è –≤–∞—Å!"
        )
    else:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—à–∫–∏")


@dp.callback_query(F.data == "nasa_apod")
async def nasa_apod_callback(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="apod_today")],
        [InlineKeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω–æ–µ", callback_data="apod_random")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])

    await callback.message.edit_text(
        "üåå NASA Astronomy Picture of the Day\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=keyboard
    )


@dp.callback_query(F.data == "apod_today")
async def apod_today_callback(callback: CallbackQuery):
    apod = get_today_apod()
    if apod and 'url' in apod:
        caption = f"üåå {apod['title']}\n\n{apod.get('explanation', '')[:200]}..."
        await callback.message.answer_photo(photo=apod['url'], caption=caption)
    else:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ NASA")


@dp.callback_query(F.data == "apod_random")
async def apod_random_callback(callback: CallbackQuery):
    apod = get_random_apod()
    if apod and 'url' in apod:
        caption = f"üåå {apod['title']}\nüìÖ {apod.get('date', '')}\n\n{apod.get('explanation', '')[:200]}..."
        await callback.message.answer_photo(photo=apod['url'], caption=caption)
    else:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ NASA")


@dp.callback_query(F.data == "weather")
async def weather_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üå§Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã:")
    await state.set_state(WeatherStates.waiting_for_city)


@dp.callback_query(F.data == "quotes")
async def quotes_callback(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞", callback_data="random_quote")],
        [InlineKeyboardButton(text="‚ú® –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∞—è", callback_data="inspirational_quote")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])

    await callback.message.edit_text(
        "üí≠ –¶–∏—Ç–∞—Ç—ã –∏ –º—É–¥—Ä–æ—Å—Ç—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ü–∏—Ç–∞—Ç—ã:",
        reply_markup=keyboard
    )


@dp.callback_query(F.data == "random_quote")
async def random_quote_callback(callback: CallbackQuery):
    quote = get_random_quote()
    if quote:
        text = f"üí≠ \"{quote['content']}\"\n\n¬© {quote['author']}"
        await callback.message.answer(text)
    else:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É")


@dp.callback_query(F.data == "inspirational_quote")
async def inspirational_quote_callback(callback: CallbackQuery):
    quote = get_inspirational_quote()
    if quote:
        text = f"‚ú® \"{quote['content']}\"\n\n¬© {quote['author']}"
        await callback.message.answer(text)
    else:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É")


@dp.callback_query(F.data == "random_number")
async def random_number_callback(callback: CallbackQuery):
    number = random.randint(1, 100)
    await callback.message.answer(f"üé≤ –í–∞—à–µ —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: {number}")


@dp.callback_query(F.data == "bot_info")
async def bot_info_callback(callback: CallbackQuery):
    info_text = """
üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:

üîß –í–µ—Ä—Å–∏—è: 2.0
üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç aiogram 3
üåê API —Å–µ—Ä–≤–∏—Å—ã:
  ‚Ä¢ NASA APOD API
  ‚Ä¢ The Cat API
  ‚Ä¢ OpenWeatherMap API
  ‚Ä¢ Quotable API

üë®‚Äçüíª –°–æ–∑–¥–∞–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ API
    """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    await callback.message.edit_text(info_text, reply_markup=keyboard)


@dp.callback_query(F.data == "list_breeds")
async def list_breeds_callback(callback: CallbackQuery):
    breeds = get_cat_breeds()
    if breeds:
        breed_names = [breed['name'] for breed in breeds[:20]]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 20
        breeds_text = "üê± –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ—Ä–æ–¥—ã –∫–æ—à–µ–∫:\n\n" + "\n".join(f"‚Ä¢ {name}" for name in breed_names)
        breeds_text += f"\n\n... –∏ –µ—â—ë {len(breeds) - 20} –ø–æ—Ä–æ–¥!" if len(breeds) > 20 else ""
        await callback.message.answer(breeds_text)
    else:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–¥")


# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–°–¢–û–Ø–ù–ò–ô ==========

@dp.message(WeatherStates.waiting_for_city)
async def process_city_weather(message: Message, state: FSMContext):
    city = message.text
    weather_data = get_weather(city)

    if weather_data and weather_data.get('cod') == 200:
        temp = weather_data['main']['temp']
        feels_like = weather_data['main']['feels_like']
        description = weather_data['weather'][0]['description']
        humidity = weather_data['main']['humidity']

        weather_text = f"""
üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}:

üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C
üå°Ô∏è –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}
üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%
        """
        await message.answer(weather_text)
    else:
        await message.answer("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.")

    await state.clear()


# ========== –¢–ï–ö–°–¢–û–í–´–ï –°–û–û–ë–©–ï–ù–ò–Ø ==========

@dp.message(F.text)
async def handle_text_messages(message: Message):
    text = message.text.lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–æ–∏—Å–∫–æ–º –ø–æ—Ä–æ–¥—ã –∫–æ—à–∫–∏
    breed_info = get_breed_info(message.text)
    if breed_info:
        cat_image_url = get_cat_image_by_breed(breed_info['id'])

        info = (
            f"üê± **{breed_info['name']}**\n\n"
            f"üåç –ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: {breed_info['origin']}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {breed_info['description']}\n"
            f"üò∏ –¢–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç: {breed_info['temperament']}\n"
            f"‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏: {breed_info['life_span']} –ª–µ—Ç"
        )

        if cat_image_url:
            await message.answer_photo(photo=cat_image_url, caption=info)
        else:
            await message.answer(info)
    else:
        # –ï—Å–ª–∏ –ø–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—é
        await message.answer(
            "ü§î –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –Ω–µ –Ω–∞—à–µ–ª —Ç–∞–∫—É—é –ø–æ—Ä–æ–¥—É –∫–æ—à–µ–∫.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—ã–∑–æ–≤–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é!",
            reply_markup=get_main_menu()
        )


# ========== –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ë–´–°–¢–†–û–ì–û –î–û–°–¢–£–ü–ê ==========

@dp.message(Command("random_cat"))
async def random_cat_command(message: Message):
    cat_url = get_random_cat()
    if cat_url:
        await message.answer_photo(photo=cat_url, caption="üê± –°–ª—É—á–∞–π–Ω–∞—è –∫–æ—à–µ—á–∫–∞!")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—à–∫–∏")


@dp.message(Command("random_apod"))
async def random_apod_command(message: Message):
    apod = get_random_apod()
    if apod and 'url' in apod:
        caption = f"üåå {apod['title']}\nüìÖ {apod.get('date', '')}"
        await message.answer_photo(photo=apod['url'], caption=caption)
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ NASA")


@dp.message(Command("weather"))
async def weather_command(message: Message, state: FSMContext):
    await message.answer("üå§Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    await state.set_state(WeatherStates.waiting_for_city)


@dp.message(Command("quote"))
async def quote_command(message: Message):
    quote = get_random_quote()
    if quote:
        text = f"üí≠ \"{quote['content']}\"\n\n¬© {quote['author']}"
        await message.answer(text)
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É")


@dp.message(Command("inspiration"))
async def inspiration_command(message: Message):
    quote = get_inspirational_quote()
    if quote:
        text = f"‚ú® \"{quote['content']}\"\n\n¬© {quote['author']}"
        await message.answer(text)
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É")


# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========

async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()


if __name__ == '__main__':
    asyncio.run(main())