import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import logging
from config import TOKEN
import sqlite3

bot = Bot(token=TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)


class StudentForm(StatesGroup):
    name = State()
    age = State()
    grade = State()


def init_db():
    conn = sqlite3.connect('school_data.db')
    cur = conn.cursor()
    cur.execute('''
    CREATE TABLE IF NOT EXISTS students (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        age INTEGER NOT NULL,
        grade TEXT NOT NULL
    )
    ''')
    conn.commit()
    conn.close()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_db()


@dp.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞—Å –∫–∞–∫ —É—á–µ–Ω–∏–∫–∞.\n–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    await state.set_state(StudentForm.name)


@dp.message(StudentForm.name)
async def get_name(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è –Ω–µ –ø—É—Å—Ç–æ–µ
    if not message.text.strip():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è:")
        return

    await state.update_data(name=message.text.strip())
    await message.answer("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
    await state.set_state(StudentForm.age)


@dp.message(StudentForm.age)
async def get_age(message: Message, state: FSMContext):
    try:
        age_value = int(message.text)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –≤–æ–∑—Ä–∞—Å—Ç–∞ –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–∞
        if age_value < 5 or age_value > 20:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —à–∫–æ–ª—å–Ω–∏–∫–∞ (–æ—Ç 5 –¥–æ 20 –ª–µ—Ç):")
            return

        await state.update_data(age=age_value)
        await message.answer("–í –∫–∞–∫–æ–º –∫–ª–∞—Å—Å–µ –≤—ã —É—á–∏—Ç–µ—Å—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1–ê, 5–ë, 11–í)")
        await state.set_state(StudentForm.grade)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ):")


@dp.message(StudentForm.grade)
async def get_grade(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞—Å—Å –Ω–µ –ø—É—Å—Ç–æ–π
    if not message.text.strip():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å:")
        return

    await state.update_data(grade=message.text.strip())
    user_data = await state.get_data()

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('school_data.db')
        cur = conn.cursor()
        cur.execute('''
            INSERT INTO students (name, age, grade) VALUES (?, ?, ?)
        ''', (user_data['name'], user_data['age'], user_data['grade']))
        conn.commit()
        student_id = cur.lastrowid  # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
        conn.close()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await message.answer(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —à–∫–æ–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:\n\n"
            f"üìã ID —É—á–µ–Ω–∏–∫–∞: {student_id}\n"
            f"üë§ –ò–º—è: {user_data['name']}\n"
            f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user_data['age']} –ª–µ—Ç\n"
            f"üè´ –ö–ª–∞—Å—Å: {user_data['grade']}\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! üéì"
        )

    except sqlite3.Error as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        logging.error(f"Database error: {e}")

    finally:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
@dp.message(Command('stats'))
async def show_stats(message: Message):
    try:
        conn = sqlite3.connect('school_data.db')
        cur = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤
        cur.execute('SELECT COUNT(*) FROM students')
        total_students = cur.fetchone()[0]

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤ –ø–æ –∫–ª–∞—Å—Å–∞–º
        cur.execute('SELECT grade, COUNT(*) FROM students GROUP BY grade ORDER BY grade')
        grade_stats = cur.fetchall()

        conn.close()

        stats_message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —à–∫–æ–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n\n"
        stats_message += f"üë• –í—Å–µ–≥–æ —É—á–µ–Ω–∏–∫–æ–≤: {total_students}\n\n"

        if grade_stats:
            stats_message += "üìö –ü–æ –∫–ª–∞—Å—Å–∞–º:\n"
            for grade, count in grade_stats:
                stats_message += f"  ‚Ä¢ {grade}: {count} —É—á.\n"
        else:
            stats_message += "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤."

        await message.answer(stats_message)

    except sqlite3.Error as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        logging.error(f"Database error in stats: {e}")


async def main():
    logging.info("–ó–∞–ø—É—Å–∫ —à–∫–æ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞...")
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())