from flask import Flask, render_template, request, redirect, url_for, flash, send_file, jsonify
from flask_sqlalchemy import SQLAlchemy
from werkzeug.utils import secure_filename
import os
import zipfile
import tempfile
import shutil
from docx import Document
from docx.shared import Inches
import re
from datetime import datetime

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your-secret-key-here'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///contract_management.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['UPLOAD_FOLDER'] = 'uploads/templates'
app.config['OUTPUT_FOLDER'] = 'outputs'

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
os.makedirs(app.config['OUTPUT_FOLDER'], exist_ok=True)

db = SQLAlchemy(app)


# –ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
class Client(db.Model):
    __tablename__ = 'clients'

    id = db.Column(db.Integer, primary_key=True)
    number = db.Column(db.String(50), unique=True, nullable=False)
    full_name = db.Column(db.String(500), nullable=False)
    short_name = db.Column(db.String(200))
    inn = db.Column(db.String(12), nullable=False)
    ogrn = db.Column(db.String(15))
    address = db.Column(db.Text)
    position = db.Column(db.String(200))
    position_genitive = db.Column(db.String(200))
    representative_name = db.Column(db.String(200))
    representative_name_genitive = db.Column(db.String(200))
    basis = db.Column(db.String(500))
    bank_details = db.Column(db.Text)
    phone = db.Column(db.String(50))
    email = db.Column(db.String(100))
    website = db.Column(db.String(200))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)


class Organization(db.Model):
    __tablename__ = 'organizations'

    id = db.Column(db.Integer, primary_key=True)
    signatory_position = db.Column(db.String(200), nullable=False)
    signatory_name = db.Column(db.String(200), nullable=False)
    signatory_power_of_attorney = db.Column(db.String(500))
    executor_position = db.Column(db.String(200), nullable=False)
    executor_name = db.Column(db.String(200), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)


class ContractTemplate(db.Model):
    __tablename__ = 'contract_templates'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(200), nullable=False)
    description = db.Column(db.Text)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    # –°–≤—è–∑—å —Å —Ñ–∞–π–ª–∞–º–∏ —à–∞–±–ª–æ–Ω–æ–≤
    files = db.relationship('TemplateFile', backref='template', lazy=True, cascade='all, delete-orphan')


class TemplateFile(db.Model):
    __tablename__ = 'template_files'

    id = db.Column(db.Integer, primary_key=True)
    template_id = db.Column(db.Integer, db.ForeignKey('contract_templates.id'), nullable=False)
    filename = db.Column(db.String(200), nullable=False)
    original_filename = db.Column(db.String(200), nullable=False)
    uploaded_at = db.Column(db.DateTime, default=datetime.utcnow)


# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
with app.app_context():
    db.create_all()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def replace_placeholders(text, data):
    """–ó–∞–º–µ–Ω—è–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ —Ç–µ–∫—Å—Ç–µ –Ω–∞ –¥–∞–Ω–Ω—ã–µ"""
    if not text:
        return text

    for key, value in data.items():
        placeholder = '{{ ' + key + ' }}'
        if placeholder in text:
            text = text.replace(placeholder, str(value or ''))
    return text


def normalize_url(url):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç URL, –¥–æ–±–∞–≤–ª—è—è –ø—Ä–æ—Ç–æ–∫–æ–ª –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ"""
    if not url:
        return url

    url = url.strip()
    if url and not url.startswith(('http://', 'https://')):
        return f'https://{url}'
    return url


def clean_filename(filename):
    """–û—á–∏—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, —Å–æ—Ö—Ä–∞–Ω—è—è —á–∏—Ç–∞–µ–º–æ—Å—Ç—å"""
    # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    name_without_ext = os.path.splitext(filename)[0] if '.' in filename else filename
    # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    clean_name = re.sub(r'[<>:"/\\|?*]', '_', name_without_ext)
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    clean_name = re.sub(r'[_\s]+', '_', clean_name).strip('_')
    return clean_name if clean_name else 'document'


def process_xlsx_template(template_path, output_path, data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ Excel —à–∞–±–ª–æ–Ω–æ–≤ —Å –∑–∞–º–µ–Ω–æ–π –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        try:
            from openpyxl import load_workbook
        except ImportError:
            print("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ openpyxl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install openpyxl")
            raise ImportError("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ openpyxl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

        import re

        print(f"üìä –û—Ç–∫—Ä—ã—Ç–∏–µ Excel —Ñ–∞–π–ª–∞: {template_path}")
        workbook = load_workbook(template_path)

        replacements_made = 0

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ª–∏—Å—Ç–∞–º
        for sheet_name in workbook.sheetnames:
            sheet = workbook[sheet_name]
            print(f"  üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—Å—Ç–∞: {sheet_name}")

            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —è—á–µ–π–∫–∞–º
            for row in sheet.iter_rows():
                for cell in row:
                    if cell.value and isinstance(cell.value, str):
                        original_value = cell.value
                        new_value = original_value

                        # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
                        for key, value in data.items():
                            placeholder = '{{ ' + key + ' }}'
                            if placeholder in new_value:
                                new_value = new_value.replace(placeholder, str(value or ''))
                                replacements_made += 1

                        # –û–±–Ω–æ–≤–ª—è–µ–º —è—á–µ–π–∫—É –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        if new_value != original_value:
                            cell.value = new_value
                            print(f"    ‚úÖ –ó–∞–º–µ–Ω–∞ –≤ —è—á–µ–π–∫–µ {cell.coordinate}: {placeholder} -> {value}")

        print(f"üìä Excel: –í—Å–µ–≥–æ –∑–∞–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {replacements_made}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        workbook.save(output_path)
        print(f"üíæ Excel —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")

        return True

    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Excel —Ñ–∞–π–ª–∞: {e}")
        import traceback
        traceback.print_exc()
        raise e


def advanced_replace_in_paragraph(paragraph, data):
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∑–∞–º–µ–Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã—Ö runs"""
    if not paragraph or not hasattr(paragraph, 'runs'):
        return False

    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
    full_text = paragraph.text
    if not full_text or '{{' not in full_text:
        return False

    print(f"    üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞: {full_text[:100]}...")
    print(f"    üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ runs: {len(paragraph.runs)}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞–∂–¥–æ–≥–æ run
    run_info = []
    for i, run in enumerate(paragraph.runs):
        if run.text:
            run_info.append({
                'text': run.text,
                'bold': run.bold,
                'italic': run.italic,
                'underline': run.underline,
                'font_size': run.font.size,
                'font_name': run.font.name,
                'color': run.font.color
            })
            print(f"      Run {i}: '{run.text}' (bold: {run.bold})")

    # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ –ø–æ–ª–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
    original_text = full_text
    replacements_made = []

    for key, value in data.items():
        placeholder = '{{ ' + key + ' }}'
        if placeholder in full_text:
            full_text = full_text.replace(placeholder, str(value or ''))
            replacements_made.append(f"{placeholder} -> {value}")

    # –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ
    if full_text == original_text:
        return False

    print(f"    ‚úÖ –ó–∞–º–µ–Ω—ã: {replacements_made}")

    try:
        # –û—á–∏—â–∞–µ–º –≤—Å–µ runs
        for run in paragraph.runs:
            run.text = ""

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π run —Å –∑–∞–º–µ–Ω–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        new_run = paragraph.runs[0] if paragraph.runs else paragraph.add_run()
        new_run.text = full_text

        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        if run_info:
            first_format = run_info[0]
            try:
                new_run.bold = first_format['bold']
                new_run.italic = first_format['italic']
                new_run.underline = first_format['underline']
                if first_format['font_size']:
                    new_run.font.size = first_format['font_size']
                if first_format['font_name']:
                    new_run.font.name = first_format['font_name']
            except Exception as e:
                print(f"      ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {e}")

        print(f"    üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç: {full_text[:100]}...")
        return True

    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ: {e}")
        return False


def simple_replace_in_paragraph(paragraph, data):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∑–∞–º–µ–Ω—ã"""
    return advanced_replace_in_paragraph(paragraph, data)


def diagnose_xlsx_placeholders(template_path):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –≤ Excel —Ñ–∞–π–ª–µ"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        try:
            from openpyxl import load_workbook
        except ImportError:
            print("‚ùå openpyxl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Excel —Ñ–∞–π–ª–æ–≤")
            return []

        workbook = load_workbook(template_path)
        placeholders_found = set()

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ª–∏—Å—Ç–∞–º
        for sheet_name in workbook.sheetnames:
            sheet = workbook[sheet_name]

            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —è—á–µ–π–∫–∞–º
            for row in sheet.iter_rows():
                for cell in row:
                    if cell.value and isinstance(cell.value, str):
                        # –ò—â–µ–º –≤—Å–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ {{ text }}
                        matches = re.findall(r'\{\{\s*([^}]+)\s*\}\}', cell.value)
                        for match in matches:
                            placeholders_found.add(match.strip())

        return list(placeholders_found)

    except ImportError:
        print("‚ùå openpyxl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Excel —Ñ–∞–π–ª–æ–≤")
        return []
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Excel: {e}")
        return []
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –≤ Excel —Ñ–∞–π–ª–µ"""
    try:
        from openpyxl import load_workbook
        import re

        workbook = load_workbook(template_path)
        placeholders_found = set()

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ª–∏—Å—Ç–∞–º
        for sheet_name in workbook.sheetnames:
            sheet = workbook[sheet_name]

            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —è—á–µ–π–∫–∞–º
            for row in sheet.iter_rows():
                for cell in row:
                    if cell.value and isinstance(cell.value, str):
                        # –ò—â–µ–º –≤—Å–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ {{ text }}
                        matches = re.findall(r'\{\{\s*([^}]+)\s*\}\}', cell.value)
                        for match in matches:
                            placeholders_found.add(match.strip())

        return list(placeholders_found)

    except ImportError:
        return []
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Excel: {e}")
        return []
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∑–∞–º–µ–Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã—Ö runs"""
    if not paragraph or not hasattr(paragraph, 'runs'):
        return False

    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
    full_text = paragraph.text
    if not full_text or '{{' not in full_text:
        return False

    print(f"    üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞: {full_text[:100]}...")
    print(f"    üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ runs: {len(paragraph.runs)}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞–∂–¥–æ–≥–æ run
    run_info = []
    for i, run in enumerate(paragraph.runs):
        if run.text:
            run_info.append({
                'text': run.text,
                'bold': run.bold,
                'italic': run.italic,
                'underline': run.underline,
                'font_size': run.font.size,
                'font_name': run.font.name,
                'color': run.font.color
            })
            print(f"      Run {i}: '{run.text}' (bold: {run.bold})")

    # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ –ø–æ–ª–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
    original_text = full_text
    replacements_made = []

    for key, value in data.items():
        placeholder = '{{ ' + key + ' }}'
        if placeholder in full_text:
            full_text = full_text.replace(placeholder, str(value or ''))
            replacements_made.append(f"{placeholder} -> {value}")

    # –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ
    if full_text == original_text:
        return False

    print(f"    ‚úÖ –ó–∞–º–µ–Ω—ã: {replacements_made}")

    try:
        # –û—á–∏—â–∞–µ–º –≤—Å–µ runs
        for run in paragraph.runs:
            run.text = ""

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π run —Å –∑–∞–º–µ–Ω–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        new_run = paragraph.runs[0] if paragraph.runs else paragraph.add_run()
        new_run.text = full_text

        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        if run_info:
            first_format = run_info[0]
            try:
                new_run.bold = first_format['bold']
                new_run.italic = first_format['italic']
                new_run.underline = first_format['underline']
                if first_format['font_size']:
                    new_run.font.size = first_format['font_size']
                if first_format['font_name']:
                    new_run.font.name = first_format['font_name']
            except Exception as e:
                print(f"      ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {e}")

        print(f"    üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç: {full_text[:100]}...")
        return True

    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ: {e}")
        return False


def simple_replace_in_paragraph(paragraph, data):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∑–∞–º–µ–Ω—ã"""
    return advanced_replace_in_paragraph(paragraph, data)


def fix_broken_placeholders_in_paragraph(paragraph):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ"""
    if not paragraph or not hasattr(paragraph, 'runs') or not paragraph.runs:
        return False

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤—Å–µ—Ö runs
    full_text = paragraph.text
    if not full_text or '{{' not in full_text:
        return False

    # –ò—â–µ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
    import re
    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–∏–ø–∞ {{ —á—Ç–æ-—Ç–æ }}
    broken_patterns = re.findall(r'\{\{\s*[^}]*\s*\}\}', full_text)
    if not broken_patterns:
        return False

    print(f"    üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã—Ö –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –≤: {full_text[:50]}...")
    print(f"    üìù –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {broken_patterns}")

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ run
        first_run_format = None
        if paragraph.runs:
            first_run = paragraph.runs[0]
            first_run_format = {
                'bold': first_run.bold,
                'italic': first_run.italic,
                'underline': first_run.underline,
                'font_size': first_run.font.size,
                'font_name': first_run.font.name
            }

        # –û—á–∏—â–∞–µ–º –≤—Å–µ runs
        for run in paragraph.runs:
            run.text = ""

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π run —Å –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        new_run = paragraph.runs[0] if paragraph.runs else paragraph.add_run()
        new_run.text = full_text

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        if first_run_format:
            try:
                new_run.bold = first_run_format['bold']
                new_run.italic = first_run_format['italic']
                new_run.underline = first_run_format['underline']
                if first_run_format['font_size']:
                    new_run.font.size = first_run_format['font_size']
                if first_run_format['font_name']:
                    new_run.font.name = first_run_format['font_name']
            except Exception as e:
                print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

        print(f"    ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {full_text[:50]}...")
        return True

    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã—Ö –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤: {e}")
        return False


def process_docx_template_safe(template_path, output_path, data):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ DOCX —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        print(f"üìÑ –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞: {template_path}")
        doc = Document(template_path)

        # –≠–¢–ê–ü 1: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã—Ö –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
        print("üîß –≠–¢–ê–ü 1: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã—Ö –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤...")
        fixed_paragraphs = 0

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
        for i, paragraph in enumerate(doc.paragraphs):
            try:
                if fix_broken_placeholders_in_paragraph(paragraph):
                    fixed_paragraphs += 1
            except Exception as e:
                print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ {i}: {e}")
                continue

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
        for table_idx, table in enumerate(doc.tables):
            try:
                for row_idx, row in enumerate(table.rows):
                    try:
                        for cell_idx, cell in enumerate(row.cells):
                            try:
                                for para_idx, paragraph in enumerate(cell.paragraphs):
                                    try:
                                        if fix_broken_placeholders_in_paragraph(paragraph):
                                            fixed_paragraphs += 1
                                    except Exception as e:
                                        print(
                                            f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ {table_idx}[{row_idx}][{cell_idx}][{para_idx}]: {e}")
                                        continue
                            except Exception as e:
                                print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —è—á–µ–π–∫–µ —Ç–∞–±–ª–∏—Ü—ã {table_idx}[{row_idx}][{cell_idx}]: {e}")
                                continue
                    except Exception as e:
                        print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ —Ç–∞–±–ª–∏—Ü—ã {table_idx}[{row_idx}]: {e}")
                        continue
            except Exception as e:
                print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ {table_idx}: {e}")
                continue

        print(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤: {fixed_paragraphs}")

        # –≠–¢–ê–ü 2: –ó–∞–º–µ–Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
        print("üîç –≠–¢–ê–ü 2: –ó–∞–º–µ–Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤...")
        replacements_made = 0

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        print("üîç –ü–æ–∏—Å–∫ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ç–µ–∫—Å—Ç–µ...")
        for i, paragraph in enumerate(doc.paragraphs):
            try:
                if advanced_replace_in_paragraph(paragraph, data):
                    replacements_made += 1
                    print(f"  ‚úÖ –ó–∞–º–µ–Ω–∞ –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ {i}")
            except Exception as e:
                print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ {i}: {e}")
                continue

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü
        print("üîç –ü–æ–∏—Å–∫ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö...")
        for table_idx, table in enumerate(doc.tables):
            try:
                for row_idx, row in enumerate(table.rows):
                    try:
                        for cell_idx, cell in enumerate(row.cells):
                            try:
                                for para_idx, paragraph in enumerate(cell.paragraphs):
                                    try:
                                        if advanced_replace_in_paragraph(paragraph, data):
                                            replacements_made += 1
                                            print(
                                                f"  ‚úÖ –ó–∞–º–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ {table_idx}, —Å—Ç—Ä–æ–∫–∞ {row_idx}, —è—á–µ–π–∫–∞ {cell_idx}")
                                    except Exception as e:
                                        print(
                                            f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ —Ç–∞–±–ª–∏—Ü—ã {table_idx}[{row_idx}][{cell_idx}][{para_idx}]: {e}")
                                        continue
                            except Exception as e:
                                print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —è—á–µ–π–∫–µ —Ç–∞–±–ª–∏—Ü—ã {table_idx}[{row_idx}][{cell_idx}]: {e}")
                                continue
                    except Exception as e:
                        print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ —Ç–∞–±–ª–∏—Ü—ã {table_idx}[{row_idx}]: {e}")
                        continue
            except Exception as e:
                print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ {table_idx}: {e}")
                continue

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ —Ñ—É—Ç–µ—Ä–æ–≤
        print("üîç –ü–æ–∏—Å–∫ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –∏ —Ñ—É—Ç–µ—Ä–∞—Ö...")
        for section_idx, section in enumerate(doc.sections):
            try:
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                if hasattr(section, 'header') and section.header:
                    for para_idx, paragraph in enumerate(section.header.paragraphs):
                        try:
                            if advanced_replace_in_paragraph(paragraph, data):
                                replacements_made += 1
                                print(f"  ‚úÖ –ó–∞–º–µ–Ω–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ —Å–µ–∫—Ü–∏–∏ {section_idx}")
                        except Exception as e:
                            print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ —Å–µ–∫—Ü–∏–∏ {section_idx}[{para_idx}]: {e}")
                            continue

                # –§—É—Ç–µ—Ä—ã
                if hasattr(section, 'footer') and section.footer:
                    for para_idx, paragraph in enumerate(section.footer.paragraphs):
                        try:
                            if advanced_replace_in_paragraph(paragraph, data):
                                replacements_made += 1
                                print(f"  ‚úÖ –ó–∞–º–µ–Ω–∞ –≤ —Ñ—É—Ç–µ—Ä–µ —Å–µ–∫—Ü–∏–∏ {section_idx}")
                        except Exception as e:
                            print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ñ—É—Ç–µ—Ä–µ —Å–µ–∫—Ü–∏–∏ {section_idx}[{para_idx}]: {e}")
                            continue
            except Exception as e:
                print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Å–µ–∫—Ü–∏–∏ {section_idx}: {e}")
                continue

        print(f"üìä –í—Å–µ–≥–æ –∑–∞–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {replacements_made}")

        if replacements_made == 0:
            print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–∏ –æ–¥–Ω–æ–≥–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å: {{ –ò–º—è_–ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π }}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print("\nüìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–ø–µ—Ä–≤—ã–µ 10 –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤):")
            for i, para in enumerate(doc.paragraphs[:10]):
                if para.text.strip():
                    print(f"  –ü–∞—Ä–∞–≥—Ä–∞—Ñ {i}: {para.text}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        doc.save(output_path)
        print(f"üíæ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")

        return True

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        raise e


def diagnose_document_placeholders(template_path):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ (Word –∏–ª–∏ Excel)"""
    file_extension = os.path.splitext(template_path)[1].lower()

    if file_extension == '.docx':
        return diagnose_docx_placeholders(template_path)
    elif file_extension == '.xlsx':
        return diagnose_xlsx_placeholders(template_path)
    else:
        return []


def diagnose_docx_placeholders(template_path):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –≤ Word –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
    try:
        doc = Document(template_path)
        placeholders_found = set()

        # –ü–æ–∏—Å–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
        for paragraph in doc.paragraphs:
            text = paragraph.text
            # –ò—â–µ–º –≤—Å–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ {{ text }}
            matches = re.findall(r'\{\{\s*([^}]+)\s*\}\}', text)
            for match in matches:
                placeholders_found.add(match.strip())

        # –ü–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
        for table in doc.tables:
            for row in table.rows:
                for cell in row.cells:
                    for paragraph in cell.paragraphs:
                        text = paragraph.text
                        matches = re.findall(r'\{\{\s*([^}]+)\s*\}\}', text)
                        for match in matches:
                            placeholders_found.add(match.strip())

        # –ü–æ–∏—Å–∫ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –∏ —Ñ—É—Ç–µ—Ä–∞—Ö
        for section in doc.sections:
            if hasattr(section, 'header') and section.header:
                for paragraph in section.header.paragraphs:
                    text = paragraph.text
                    matches = re.findall(r'\{\{\s*([^}]+)\s*\}\}', text)
                    for match in matches:
                        placeholders_found.add(match.strip())

            if hasattr(section, 'footer') and section.footer:
                for paragraph in section.footer.paragraphs:
                    text = paragraph.text
                    matches = re.findall(r'\{\{\s*([^}]+)\s*\}\}', text)
                    for match in matches:
                        placeholders_found.add(match.strip())

        return list(placeholders_found)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Word: {e}")
        return []


def calculate_file_hash(file_path):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ö—ç—à —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏"""
    import hashlib
    hash_md5 = hashlib.md5()
    try:
        with open(file_path, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hash_md5.update(chunk)
        return hash_md5.hexdigest()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Ö—ç—à–∞ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return "error"


def debug_file_contents(file_path, max_chars=500):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    try:
        doc = Document(file_path)
        text_content = []

        # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
        for i, paragraph in enumerate(doc.paragraphs[:5]):
            if paragraph.text.strip():
                text_content.append(f"–ü{i}: {paragraph.text[:100]}...")

        content_preview = " | ".join(text_content)
        return content_preview[:max_chars] if content_preview else "–ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}"


def debug_template_processing(templates, template_ids):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
    print(f"\nüîç –û–¢–õ–ê–î–ö–ê –®–ê–ë–õ–û–ù–û–í:")
    print(f"   –ü–æ–ª—É—á–µ–Ω–æ ID —à–∞–±–ª–æ–Ω–æ–≤: {template_ids}")
    print(f"   –ù–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤ –≤ –ë–î: {len(templates)}")

    for i, template in enumerate(templates):
        print(f"\n   üìã –®–∞–±–ª–æ–Ω #{i + 1}:")
        print(f"      ID: {template.id}")
        print(f"      –ù–∞–∑–≤–∞–Ω–∏–µ: '{template.name}'")
        print(f"      –û–ø–∏—Å–∞–Ω–∏–µ: '{template.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}'")
        print(f"      –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {template.created_at}")
        print(f"      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: {len(template.files)}")

        for j, template_file in enumerate(template.files):
            file_path = os.path.join('uploads/templates', template_file.filename)
            file_exists = os.path.exists(file_path)
            file_size = os.path.getsize(file_path) if file_exists else 0
            file_hash = calculate_file_hash(file_path) if file_exists else "N/A"

            print(f"         üìÑ –§–∞–π–ª #{j + 1}:")
            print(f"            ID –≤ –ë–î: {template_file.id}")
            print(f"            –û—Ä–∏–≥–∏–Ω–∞–ª: {template_file.original_filename}")
            print(f"            –°–∏—Å—Ç–µ–º–∞: {template_file.filename}")
            print(f"            –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {'‚úÖ' if file_exists else '‚ùå'}")
            print(f"            –†–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
            print(f"            MD5: {file_hash}")
            print(f"            –ó–∞–≥—Ä—É–∂–µ–Ω: {template_file.uploaded_at}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤
            if file_exists:
                try:
                    content_preview = debug_file_contents(file_path, 100)
                    print(f"            –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {content_preview}")
                except Exception as e:
                    print(f"            –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ö—ç—à–∏ –≤ –æ–¥–Ω–æ–º —à–∞–±–ª–æ–Ω–µ
        file_hashes = []
        for template_file in template.files:
            file_path = os.path.join('uploads/templates', template_file.filename)
            if os.path.exists(file_path):
                file_hash = calculate_file_hash(file_path)
                file_hashes.append((template_file.original_filename, file_hash))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        seen_hashes = set()
        duplicates = []
        for filename, hash_val in file_hashes:
            if hash_val in seen_hashes:
                duplicates.append(filename)
            seen_hashes.add(hash_val)

        if duplicates:
            print(f"      ‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–†–£–Æ–©–ò–ï–°–Ø –§–ê–ô–õ–´: {duplicates}")
        else:
            print(f"      ‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã")


@app.route('/')
def index():
    return render_template('index.html')


# –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
@app.route('/clients')
def clients():
    clients = Client.query.all()
    return render_template('clients.html', clients=clients)


@app.route('/clients/add', methods=['GET', 'POST'])
def add_client():
    if request.method == 'POST':
        client = Client(
            number=request.form['number'],
            full_name=request.form['full_name'],
            short_name=request.form['short_name'],
            inn=request.form['inn'],
            ogrn=request.form['ogrn'],
            address=request.form['address'],
            position=request.form['position'],
            position_genitive=request.form['position_genitive'],
            representative_name=request.form['representative_name'],
            representative_name_genitive=request.form['representative_name_genitive'],
            basis=request.form['basis'],
            bank_details=request.form['bank_details'],
            phone=request.form['phone'],
            email=request.form['email'],
            website=normalize_url(request.form['website'])
        )

        try:
            db.session.add(client)
            db.session.commit()
            flash('–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!', 'success')
            return redirect(url_for('clients'))
        except Exception as e:
            db.session.rollback()
            flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}', 'error')

    return render_template('add_client.html')


@app.route('/clients/edit/<int:id>', methods=['GET', 'POST'])
def edit_client(id):
    client = Client.query.get_or_404(id)

    if request.method == 'POST':
        client.number = request.form['number']
        client.full_name = request.form['full_name']
        client.short_name = request.form['short_name']
        client.inn = request.form['inn']
        client.ogrn = request.form['ogrn']
        client.address = request.form['address']
        client.position = request.form['position']
        client.position_genitive = request.form['position_genitive']
        client.representative_name = request.form['representative_name']
        client.representative_name_genitive = request.form['representative_name_genitive']
        client.basis = request.form['basis']
        client.bank_details = request.form['bank_details']
        client.phone = request.form['phone']
        client.email = request.form['email']
        client.website = normalize_url(request.form['website'])

        try:
            db.session.commit()
            flash('–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!', 'success')
            return redirect(url_for('clients'))
        except Exception as e:
            db.session.rollback()
            flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}', 'error')

    return render_template('edit_client.html', client=client)


@app.route('/clients/delete/<int:id>')
def delete_client(id):
    client = Client.query.get_or_404(id)
    try:
        db.session.delete(client)
        db.session.commit()
        flash('–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}', 'error')

    return redirect(url_for('clients'))


# –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
@app.route('/organizations')
def organizations():
    organizations = Organization.query.all()
    return render_template('organizations.html', organizations=organizations)


@app.route('/organizations/add', methods=['GET', 'POST'])
def add_organization():
    if request.method == 'POST':
        organization = Organization(
            signatory_position=request.form['signatory_position'],
            signatory_name=request.form['signatory_name'],
            signatory_power_of_attorney=request.form['signatory_power_of_attorney'],
            executor_position=request.form['executor_position'],
            executor_name=request.form['executor_name']
        )

        try:
            db.session.add(organization)
            db.session.commit()
            flash('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!', 'success')
            return redirect(url_for('organizations'))
        except Exception as e:
            db.session.rollback()
            flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}', 'error')

    return render_template('add_organization.html')


@app.route('/organizations/edit/<int:id>', methods=['GET', 'POST'])
def edit_organization(id):
    organization = Organization.query.get_or_404(id)

    if request.method == 'POST':
        organization.signatory_position = request.form['signatory_position']
        organization.signatory_name = request.form['signatory_name']
        organization.signatory_power_of_attorney = request.form['signatory_power_of_attorney']
        organization.executor_position = request.form['executor_position']
        organization.executor_name = request.form['executor_name']

        try:
            db.session.commit()
            flash('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!', 'success')
            return redirect(url_for('organizations'))
        except Exception as e:
            db.session.rollback()
            flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}', 'error')

    return render_template('edit_organization.html', organization=organization)


@app.route('/organizations/delete/<int:id>')
def delete_organization(id):
    organization = Organization.query.get_or_404(id)
    try:
        db.session.delete(organization)
        db.session.commit()
        flash('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}', 'error')

    return redirect(url_for('organizations'))


# –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
@app.route('/templates')
def templates():
    templates = ContractTemplate.query.all()
    return render_template('templates.html', templates=templates)


@app.route('/templates/upload', methods=['POST'])
def upload_template():
    if 'files' not in request.files:
        flash('–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã', 'error')
        return redirect(url_for('templates'))

    files = request.files.getlist('files')
    template_name = request.form.get('name', '').strip()

    if not template_name:
        flash('–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞', 'error')
        return redirect(url_for('templates'))

    valid_files = []
    for file in files:
        if file.filename != '' and (file.filename.endswith('.docx') or file.filename.endswith('.xlsx')):
            valid_files.append(file)

    if not valid_files:
        flash('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª .docx –∏–ª–∏ .xlsx', 'error')
        return redirect(url_for('templates'))

    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω
        template = ContractTemplate(
            name=template_name,
            description=request.form.get('description', '')
        )
        db.session.add(template)
        db.session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID —à–∞–±–ª–æ–Ω–∞

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã
        import time
        import random

        for i, file in enumerate(valid_files):
            filename = secure_filename(file.filename)
            # –î–æ–±–∞–≤–ª—è–µ–º timestamp —Å –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞–º–∏ –∏ —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S_%f')
            random_suffix = random.randint(1000, 9999)
            unique_filename = f"{timestamp}_{random_suffix}_{i:02d}_{filename}"
            filepath = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)

            print(f"üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ #{i + 1}:")
            print(f"   –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è: {filename}")
            print(f"   –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è: {unique_filename}")
            print(f"   –ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {filepath}")

            file.save(filepath)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
            if os.path.exists(filepath):
                saved_size = os.path.getsize(filepath)
                saved_hash = calculate_file_hash(filepath)
                print(f"   ‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω, —Ä–∞–∑–º–µ—Ä: {saved_size} –±–∞–π—Ç")
                print(f"   üîê MD5: {saved_hash}")
            else:
                print(f"   ‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è!")

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ñ–∞–π–ª–µ
            template_file = TemplateFile(
                template_id=template.id,
                filename=unique_filename,
                original_filename=filename
            )
            db.session.add(template_file)
            print(f"   üìù –ó–∞–ø–∏—Å—å –≤ –ë–î —Å–æ–∑–¥–∞–Ω–∞: ID —à–∞–±–ª–æ–Ω–∞ {template.id}, —Ñ–∞–π–ª {unique_filename}")

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —Ä–∞–∑–Ω—ã—Ö timestamp'–æ–≤
            time.sleep(0.01)

        db.session.commit()
        flash(f'–®–∞–±–ª–æ–Ω "{template_name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω —Å {len(valid_files)} —Ñ–∞–π–ª–∞–º–∏!', 'success')

    except Exception as e:
        db.session.rollback()
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: {str(e)}', 'error')

    return redirect(url_for('templates'))


@app.route('/templates/delete/<int:id>')
def delete_template(id):
    template = ContractTemplate.query.get_or_404(id)

    try:
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å –¥–∏—Å–∫–∞
        for template_file in template.files:
            file_path = os.path.join(app.config['UPLOAD_FOLDER'], template_file.filename)
            if os.path.exists(file_path):
                os.remove(file_path)

        # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ñ–∞–π–ª—ã —É–¥–∞–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑-–∑–∞ cascade)
        db.session.delete(template)
        db.session.commit()
        flash('–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', 'success')

    except Exception as e:
        db.session.rollback()
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: {str(e)}', 'error')

    return redirect(url_for('templates'))


@app.route('/templates/test/<int:id>')
def test_template(id):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞"""
    template = ContractTemplate.query.get_or_404(id)

    print(f"\n=== –¢–ï–°–¢ –®–ê–ë–õ–û–ù–ê '{template.name}' ===")

    result = {
        'template_name': template.name,
        'template_description': template.description,
        'files_count': len(template.files),
        'files': []
    }

    for template_file in template.files:
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], template_file.filename)

        file_info = {
            'original_filename': template_file.original_filename,
            'system_filename': template_file.filename,
            'exists': os.path.exists(file_path),
            'size': 0,
            'hash': '',
            'placeholders': [],
            'content_preview': '',
            'error': None
        }

        if os.path.exists(file_path):
            try:
                file_info['size'] = os.path.getsize(file_path)
                file_info['hash'] = calculate_file_hash(file_path)
                file_info['placeholders'] = diagnose_document_placeholders(file_path)
                file_info['content_preview'] = debug_file_contents(file_path)

                print(f"\nüìÑ –§–∞–π–ª: {template_file.original_filename}")
                print(f"   –†–∞–∑–º–µ—Ä: {file_info['size']} –±–∞–π—Ç")
                print(f"   MD5: {file_info['hash']}")
                print(f"   –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã: {len(file_info['placeholders'])}")
                print(f"   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {file_info['content_preview'][:100]}...")

            except Exception as e:
                file_info['error'] = str(e)
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        else:
            file_info['error'] = '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
            print(f"   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")

        result['files'].append(file_info)

    return jsonify(result)


def analyze_document_structure(template_path):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –≤—ã—è–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å runs"""
    try:
        doc = Document(template_path)

        analysis = {
            'total_paragraphs': len(doc.paragraphs),
            'paragraphs_with_placeholders': 0,
            'broken_placeholders': [],
            'runs_analysis': [],
            'placeholders_found': set()
        }

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        for i, paragraph in enumerate(doc.paragraphs):
            para_text = paragraph.text
            if '{{' in para_text and '}}' in para_text:
                analysis['paragraphs_with_placeholders'] += 1

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º runs –≤ —ç—Ç–æ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ
                runs_info = []
                runs_text = []
                for j, run in enumerate(paragraph.runs):
                    runs_info.append({
                        'index': j,
                        'text': run.text,
                        'length': len(run.text),
                        'has_brackets': '{{' in run.text or '}}' in run.text
                    })
                    runs_text.append(run.text)

                # –ò—â–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
                import re
                placeholders = re.findall(r'\{\{\s*([^}]+)\s*\}\}', para_text)
                for ph in placeholders:
                    analysis['placeholders_found'].add(ph.strip())

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑–æ—Ä–≤–∞–Ω –ª–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –º–µ–∂–¥—É runs
                if len(paragraph.runs) > 1 and ('{{' in para_text or '}}' in para_text):
                    full_text = ''.join(runs_text)
                    if full_text != para_text:
                        analysis['broken_placeholders'].append({
                            'paragraph_index': i,
                            'paragraph_text': para_text[:100],
                            'runs_count': len(paragraph.runs),
                            'runs': runs_info,
                            'issue': '–†–∞–∑–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ runs –∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞'
                        })
                    elif any('{{' in run.text for run in paragraph.runs) and not any(
                            '}}' in run.text for run in paragraph.runs):
                        analysis['broken_placeholders'].append({
                            'paragraph_index': i,
                            'paragraph_text': para_text[:100],
                            'runs_count': len(paragraph.runs),
                            'runs': runs_info,
                            'issue': '–û—Ç–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏ –Ω–µ –≤ —Ç–æ–º –∂–µ run, —á—Ç–æ –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ'
                        })

                if len(runs_info) > 1:
                    analysis['runs_analysis'].append({
                        'paragraph_index': i,
                        'paragraph_text': para_text[:100],
                        'runs_count': len(paragraph.runs),
                        'runs': runs_info
                    })

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã
        for table_idx, table in enumerate(doc.tables):
            for row_idx, row in enumerate(table.rows):
                for cell_idx, cell in enumerate(row.cells):
                    for para_idx, paragraph in enumerate(cell.paragraphs):
                        para_text = paragraph.text
                        if '{{' in para_text and '}}' in para_text:
                            analysis['paragraphs_with_placeholders'] += 1

                            # –ò—â–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
                            placeholders = re.findall(r'\{\{\s*([^}]+)\s*\}\}', para_text)
                            for ph in placeholders:
                                analysis['placeholders_found'].add(ph.strip())

        analysis['placeholders_found'] = list(analysis['placeholders_found'])
        return analysis

    except Exception as e:
        return {'error': str(e)}


@app.route('/templates/test-file-types/<int:id>')
def test_file_types(id):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤ –≤ —à–∞–±–ª–æ–Ω–µ"""
    template = ContractTemplate.query.get_or_404(id)

    result = {
        'template_name': template.name,
        'files': []
    }

    for template_file in template.files:
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], template_file.filename)
        file_extension = os.path.splitext(template_file.original_filename)[1].lower()

        file_info = {
            'original_filename': template_file.original_filename,
            'system_filename': template_file.filename,
            'file_extension': file_extension,
            'exists': os.path.exists(file_path),
            'size': os.path.getsize(file_path) if os.path.exists(file_path) else 0,
            'supported_type': file_extension in ['.docx', '.xlsx'],
            'would_process_as': 'Word' if file_extension == '.docx' else 'Excel' if file_extension == '.xlsx' else 'Unsupported'
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫
        if file_extension == '.xlsx':
            try:
                import openpyxl
                file_info['library_available'] = True
            except ImportError:
                file_info['library_available'] = False
        elif file_extension == '.docx':
            try:
                from docx import Document
                file_info['library_available'] = True
            except ImportError:
                file_info['library_available'] = False
        else:
            file_info['library_available'] = False

        result['files'].append(file_info)

    return jsonify(result)
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–æ–≤ –≤ —à–∞–±–ª–æ–Ω–µ"""
    template = ContractTemplate.query.get_or_404(id)

    result = {
        'template': {
            'id': template.id,
            'name': template.name,
            'description': template.description,
            'files_count': len(template.files)
        },
        'files': [],
        'analysis': {
            'duplicate_hashes': [],
            'broken_placeholders_count': 0,
            'total_placeholders': 0
        }
    }

    file_hashes = {}

    for template_file in template.files:
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], template_file.filename)

        file_info = {
            'id': template_file.id,
            'original_filename': template_file.original_filename,
            'system_filename': template_file.filename,
            'uploaded_at': template_file.uploaded_at.isoformat(),
            'exists': os.path.exists(file_path),
            'size': 0,
            'hash': None,
            'content_preview': None,
            'placeholders': [],
            'structure_analysis': None
        }

        if os.path.exists(file_path):
            try:
                file_info['size'] = os.path.getsize(file_path)
                file_info['hash'] = calculate_file_hash(file_path)
                file_info['content_preview'] = debug_file_contents(file_path, 300)
                file_info['placeholders'] = diagnose_document_placeholders(file_path)
                file_info['structure_analysis'] = analyze_document_structure(file_path)

                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if file_info['structure_analysis'] and 'broken_placeholders' in file_info['structure_analysis']:
                    result['analysis']['broken_placeholders_count'] += len(
                        file_info['structure_analysis']['broken_placeholders'])
                    result['analysis']['total_placeholders'] += len(file_info['placeholders'])

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                if file_info['hash'] in file_hashes:
                    result['analysis']['duplicate_hashes'].append({
                        'hash': file_info['hash'],
                        'files': [file_hashes[file_info['hash']], template_file.original_filename]
                    })
                else:
                    file_hashes[file_info['hash']] = template_file.original_filename

            except Exception as e:
                file_info['error'] = str(e)

        result['files'].append(file_info)

    return jsonify(result)


@app.route('/templates/debug/<int:id>')
def debug_template_files(id):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–æ–≤ –≤ —à–∞–±–ª–æ–Ω–µ"""
    template = ContractTemplate.query.get_or_404(id)

    result = {
        'template': {
            'id': template.id,
            'name': template.name,
            'description': template.description,
            'files_count': len(template.files)
        },
        'files': [],
        'analysis': {
            'duplicate_hashes': [],
            'broken_placeholders_count': 0,
            'total_placeholders': 0
        }
    }

    file_hashes = {}

    for template_file in template.files:
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], template_file.filename)

        file_info = {
            'id': template_file.id,
            'original_filename': template_file.original_filename,
            'system_filename': template_file.filename,
            'uploaded_at': template_file.uploaded_at.isoformat(),
            'exists': os.path.exists(file_path),
            'size': 0,
            'hash': None,
            'content_preview': None,
            'placeholders': [],
            'structure_analysis': None
        }

        if os.path.exists(file_path):
            try:
                file_info['size'] = os.path.getsize(file_path)
                file_info['hash'] = calculate_file_hash(file_path)
                file_info['content_preview'] = debug_file_contents(file_path, 300)
                file_info['placeholders'] = diagnose_document_placeholders(file_path)
                file_info['structure_analysis'] = analyze_document_structure(file_path)

                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if file_info['structure_analysis'] and 'broken_placeholders' in file_info['structure_analysis']:
                    result['analysis']['broken_placeholders_count'] += len(
                        file_info['structure_analysis']['broken_placeholders'])
                    result['analysis']['total_placeholders'] += len(file_info['placeholders'])

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                if file_info['hash'] in file_hashes:
                    result['analysis']['duplicate_hashes'].append({
                        'hash': file_info['hash'],
                        'files': [file_hashes[file_info['hash']], template_file.original_filename]
                    })
                else:
                    file_hashes[file_info['hash']] = template_file.original_filename

            except Exception as e:
                file_info['error'] = str(e)

        result['files'].append(file_info)

    return jsonify(result)
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —à–∞–±–ª–æ–Ω–∞"""
    template = ContractTemplate.query.get_or_404(id)

    result = {
        'template_name': template.name,
        'files': []
    }

    for template_file in template.files:
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], template_file.filename)
        if os.path.exists(file_path):
            placeholders = diagnose_document_placeholders(file_path)
            result['files'].append({
                'filename': template_file.original_filename,
                'placeholders': placeholders
            })
        else:
            result['files'].append({
                'filename': template_file.original_filename,
                'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
            })

    return jsonify(result)


@app.route('/templates/diagnose/<int:id>')
def diagnose_template(id):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —à–∞–±–ª–æ–Ω–∞"""
    template = ContractTemplate.query.get_or_404(id)

    result = {
        'template_name': template.name,
        'files': []
    }

    for template_file in template.files:
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], template_file.filename)
        if os.path.exists(file_path):
            placeholders = diagnose_document_placeholders(file_path)
            result['files'].append({
                'filename': template_file.original_filename,
                'placeholders': placeholders
            })
        else:
            result['files'].append({
                'filename': template_file.original_filename,
                'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
            })

    return jsonify(result)
    clients = Client.query.all()
    organizations = Organization.query.all()
    templates = ContractTemplate.query.all()
    return render_template('contracts.html', clients=clients, organizations=organizations, templates=templates)


# –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–æ–≤
@app.route('/contracts')
def contracts():
    clients = Client.query.all()
    organizations = Organization.query.all()
    templates = ContractTemplate.query.all()
    return render_template('contracts.html', clients=clients, organizations=organizations, templates=templates)
    client_id = request.form['client_id']
    organization_id = request.form['organization_id']
    template_ids = request.form.getlist('template_ids')

    if not client_id or not organization_id or not template_ids:
        flash('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∏ —à–∞–±–ª–æ–Ω—ã', 'error')
        return redirect(url_for('contracts'))

    client = Client.query.get_or_404(client_id)
    organization = Organization.query.get_or_404(organization_id)
    templates = ContractTemplate.query.filter(ContractTemplate.id.in_(template_ids)).all()

    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∞–±–ª–æ–Ω–∞—Ö
    debug_template_processing(templates, template_ids)

    print(f"\nüîç –ü–û–î–†–û–ë–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –§–ê–ô–õ–ê–•:")
    for i, template in enumerate(templates):
        print(f"   –®–∞–±–ª–æ–Ω {i + 1}: {template.name}")
        for j, template_file in enumerate(template.files):
            file_path = os.path.join(app.config['UPLOAD_FOLDER'], template_file.filename)
            file_exists = os.path.exists(file_path)
            file_extension = os.path.splitext(template_file.original_filename)[1].lower()
            print(f"      –§–∞–π–ª {j + 1}: {template_file.original_filename}")
            print(f"         –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: '{file_extension}'")
            print(f"         –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_exists}")
            print(f"         –ü—É—Ç—å: {file_path}")
            if file_exists:
                file_size = os.path.getsize(file_path)
                print(f"         –†–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–º–µ–Ω—ã
    data = {
        '–ù–æ–º–µ—Ä': client.number,
        '–ü–æ–ª–Ω–æ–µ_–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': client.full_name,
        '–°–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ_–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': client.short_name,
        '–ò–ù–ù': client.inn,
        '–û–ì–†–ù': client.ogrn,
        '–ê–¥—Ä–µ—Å': client.address,
        '–î–æ–ª–∂–Ω–æ—Å—Ç—å': client.position,
        '–î–æ–ª–∂–Ω–æ—Å—Ç—å_—Ä': client.position_genitive,
        '–§–ò–û_–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è': client.representative_name,
        '–§–ò–û_–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è_—Ä': client.representative_name_genitive,
        '–û—Å–Ω–æ–≤–∞–Ω–∏–µ': client.basis,
        '–†–µ–∫–≤–∏–∑–∏—Ç—ã': client.bank_details,
        '–¢–µ–ª–µ—Ñ–æ–Ω': client.phone,
        '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è_–ø–æ—á—Ç–∞': client.email,
        '–°–∞–π—Ç': client.website,
        '–î–æ–ª–∂–Ω–æ—Å—Ç—å_–ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞': organization.signatory_position,
        '–§–ò–û_–ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞': organization.signatory_name,
        '–î–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å_–ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞': organization.signatory_power_of_attorney,
        '–î–æ–ª–∂–Ω–æ—Å—Ç—å_–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è': organization.executor_position,
        '–§–ò–û_–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è': organization.executor_name,
        '–î–∞—Ç–∞': datetime.now().strftime('%d.%m.%Y')
    }

    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print("\n=== –ì–ï–ù–ï–†–ê–¶–ò–Ø –î–û–ì–û–í–û–†–û–í ===")
    print(f"–ö–ª–∏–µ–Ω—Ç: {client.full_name}")
    print(f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {organization.signatory_name}")
    print(f"–®–∞–±–ª–æ–Ω–æ–≤ –≤—ã–±—Ä–∞–Ω–æ: {len(templates)}")
    print(f"ID —à–∞–±–ª–æ–Ω–æ–≤: {template_ids}")
    print("\n–î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–º–µ–Ω—ã:")
    for key, value in data.items():
        print(f"  {{ {key} }} = '{value}'")
    print()

    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤
    with tempfile.TemporaryDirectory() as temp_dir:
        generated_files = []
        used_filenames = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏–º–µ–Ω
        base_timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ—á–∏—â–µ–Ω–Ω–æ–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∞—Ä—Ö–∏–≤–∞
        client_short = client.short_name or client.full_name
        clean_client_name = clean_filename(client_short)

        for template_idx, template in enumerate(templates):
            print(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–±–ª–æ–Ω–∞ #{template_idx + 1}: '{template.name}' (ID: {template.id})")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {template.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
            print(f"   –§–∞–π–ª–æ–≤ –≤ —à–∞–±–ª–æ–Ω–µ: {len(template.files)}")

            if not template.files:
                print(f"   ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í —à–∞–±–ª–æ–Ω–µ '{template.name}' –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤!")
                continue

            for file_idx, template_file in enumerate(template.files):
                template_path = os.path.join(app.config['UPLOAD_FOLDER'], template_file.filename)

                print(f"\n   üìÅ –§–∞–π–ª #{file_idx + 1} –≤ —à–∞–±–ª–æ–Ω–µ:")
                print(f"      ID —Ñ–∞–π–ª–∞ –≤ –ë–î: {template_file.id}")
                print(f"      –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è: {template_file.original_filename}")
                print(f"      –°–∏—Å—Ç–µ–º–Ω–æ–µ –∏–º—è: {template_file.filename}")
                print(f"      –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {template_path}")
                print(f"      –î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {template_file.uploaded_at}")

                if not os.path.exists(template_path):
                    print(f"      ‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                    flash(f'–§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {template_file.original_filename}', 'error')
                    continue

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞
                file_size = os.path.getsize(template_path)
                file_hash = calculate_file_hash(template_path)
                print(f"      üìä –†–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
                print(f"      üîê MD5 –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {file_hash}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                try:
                    doc_preview = debug_file_contents(template_path, 200)
                    print(f"      üìÑ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä: {doc_preview}")
                except Exception as e:
                    print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {e}")

                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                output_filename = template_file.original_filename

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                counter = 1
                base_name = os.path.splitext(output_filename)[0]
                extension = os.path.splitext(output_filename)[1]

                while output_filename in used_filenames:
                    output_filename = f"{base_name}_{counter:02d}{extension}"
                    counter += 1

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö
                used_filenames.add(output_filename)
                output_path = os.path.join(temp_dir, output_filename)

                print(f"      üì§ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_filename}")

                try:
                    print(f"      üîÑ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
                    file_extension = os.path.splitext(template_file.original_filename)[1].lower()
                    print(f"      üìÑ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: '{file_extension}'")

                    if file_extension == '.docx':
                        print(f"      üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ Word –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É Word –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                        success = process_docx_template_safe(template_path, output_path, data)
                        if not success:
                            print(f"      ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å Word –¥–æ–∫—É–º–µ–Ω—Ç")
                            flash(f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Word –¥–æ–∫—É–º–µ–Ω—Ç–∞: {template_file.original_filename}', 'error')
                            continue
                    elif file_extension == '.xlsx':
                        print(f"      üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–∞")
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å openpyxl
                        try:
                            import openpyxl
                        except ImportError:
                            print(f"      ‚ùå openpyxl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                            flash(
                                '–î–ª—è —Ä–∞–±–æ—Ç—ã —Å Excel —Ñ–∞–π–ª–∞–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É openpyxl: pip install openpyxl',
                                'error')
                            continue

                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É Excel —Ñ–∞–π–ª–æ–≤
                        success = process_xlsx_template(template_path, output_path, data)
                        if not success:
                            print(f"      ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å Excel —Ñ–∞–π–ª")
                            flash(f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel —Ñ–∞–π–ª–∞: {template_file.original_filename}', 'error')
                            continue
                    else:
                        print(f"      ‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file_extension}")
                        flash(
                            f'–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {template_file.original_filename} (—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {file_extension})',
                            'error')
                        continue

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω
                    if os.path.exists(output_path):
                        file_size = os.path.getsize(output_path)
                        output_hash = calculate_file_hash(output_path)
                        generated_files.append(output_path)
                        print(f"      ‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –†–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
                        print(f"      üîê MD5 –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {output_hash}")

                        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ö—ç—à–∏
                        if output_hash == file_hash:
                            print(f"      ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –∏–¥–µ–Ω—Ç–∏—á–µ–Ω –∏—Å—Ö–æ–¥–Ω–æ–º—É (–∑–∞–º–µ–Ω—ã –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ)")
                        else:
                            print(f"      ‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (—Ö—ç—à –∏–∑–º–µ–Ω–∏–ª—Å—è)")

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                        try:
                            output_preview = debug_file_contents(output_path, 200)
                            print(f"      üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {output_preview}")
                        except Exception as e:
                            print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
                    else:
                        print(f"      ‚ùå –§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω!")
                        flash(f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è {template_file.original_filename}', 'error')

                except Exception as e:
                    print(f"      üí• –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")
                    print("      üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
                    import traceback
                    traceback.print_exc()
                    flash(
                        f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {template_file.original_filename} –∏–∑ —à–∞–±–ª–æ–Ω–∞ {template.name}: {str(e)}',
                        'error')
                    continue

        print(f"\nüìä –ò–¢–û–ì–ò –ì–ï–ù–ï–†–ê–¶–ò–ò:")
        print(f"   –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(generated_files)}")

        if generated_files:
            print("   üìã –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")
            for i, file_path in enumerate(generated_files, 1):
                file_name = os.path.basename(file_path)
                file_size = os.path.getsize(file_path)
                print(f"      {i}. {file_name} ({file_size} –±–∞–π—Ç)")

            # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ —Å –ø—Ä–æ—Å—Ç—ã–º –∏–º–µ–Ω–µ–º
            archive_name = f"contracts_{base_timestamp}.zip"
            archive_path = os.path.join(app.config['OUTPUT_FOLDER'], archive_name)

            print(f"\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞: {archive_name}")
            try:
                with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                    for file_path in generated_files:
                        file_name = os.path.basename(file_path)
                        zipf.write(file_path, file_name)
                        print(f"      ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ –∞—Ä—Ö–∏–≤: {file_name}")

                archive_size = os.path.getsize(archive_path)
                print(f"üì¶ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ! –†–∞–∑–º–µ—Ä: {archive_size} –±–∞–π—Ç")
                return send_file(archive_path, as_attachment=True, download_name=archive_name)

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: {e}")
                flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: {str(e)}', 'error')


if __name__ == '__main__':
    app.run(debug=True)
    else:
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
    flash('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —à–∞–±–ª–æ–Ω—ã –∏ –¥–∞–Ω–Ω—ã–µ.', 'error')
    return redirect(url_for('contracts'))


@app.route('/contracts/generate', methods=['POST'])
def generate_contracts():
    client_id = request.form['client_id']
    organization_id = request.form['organization_id']
    template_ids = request.form.getlist('template_ids')

    if not client_id or not organization_id or not template_ids:
        flash('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∏ —à–∞–±–ª–æ–Ω—ã', 'error')
        return redirect(url_for('contracts'))

    client = Client.query.get_or_404(client_id)
    organization = Organization.query.get_or_404(organization_id)
    templates = ContractTemplate.query.filter(ContractTemplate.id.in_(template_ids)).all()

    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∞–±–ª–æ–Ω–∞—Ö
    debug_template_processing(templates, template_ids)

    print(f"\nüîç –ü–û–î–†–û–ë–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –§–ê–ô–õ–ê–•:")
    for i, template in enumerate(templates):
        print(f"   –®–∞–±–ª–æ–Ω {i + 1}: {template.name}")
        for j, template_file in enumerate(template.files):
            file_path = os.path.join(app.config['UPLOAD_FOLDER'], template_file.filename)
            file_exists = os.path.exists(file_path)
            file_extension = os.path.splitext(template_file.original_filename)[1].lower()
            print(f"      –§–∞–π–ª {j + 1}: {template_file.original_filename}")
            print(f"         –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: '{file_extension}'")
            print(f"         –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_exists}")
            print(f"         –ü—É—Ç—å: {file_path}")
            if file_exists:
                file_size = os.path.getsize(file_path)
                print(f"         –†–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–º–µ–Ω—ã
    data = {
        '–ù–æ–º–µ—Ä': client.number,
        '–ü–æ–ª–Ω–æ–µ_–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': client.full_name,
        '–°–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ_–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': client.short_name,
        '–ò–ù–ù': client.inn,
        '–û–ì–†–ù': client.ogrn,
        '–ê–¥—Ä–µ—Å': client.address,
        '–î–æ–ª–∂–Ω–æ—Å—Ç—å': client.position,
        '–î–æ–ª–∂–Ω–æ—Å—Ç—å_—Ä': client.position_genitive,
        '–§–ò–û_–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è': client.representative_name,
        '–§–ò–û_–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è_—Ä': client.representative_name_genitive,
        '–û—Å–Ω–æ–≤–∞–Ω–∏–µ': client.basis,
        '–†–µ–∫–≤–∏–∑–∏—Ç—ã': client.bank_details,
        '–¢–µ–ª–µ—Ñ–æ–Ω': client.phone,
        '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è_–ø–æ—á—Ç–∞': client.email,
        '–°–∞–π—Ç': client.website,
        '–î–æ–ª–∂–Ω–æ—Å—Ç—å_–ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞': organization.signatory_position,
        '–§–ò–û_–ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞': organization.signatory_name,
        '–î–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å_–ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞': organization.signatory_power_of_attorney,
        '–î–æ–ª–∂–Ω–æ—Å—Ç—å_–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è': organization.executor_position,
        '–§–ò–û_–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è': organization.executor_name,
        '–î–∞—Ç–∞': datetime.now().strftime('%d.%m.%Y')
    }

    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print("\n=== –ì–ï–ù–ï–†–ê–¶–ò–Ø –î–û–ì–û–í–û–†–û–í ===")
    print(f"–ö–ª–∏–µ–Ω—Ç: {client.full_name}")
    print(f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {organization.signatory_name}")
    print(f"–®–∞–±–ª–æ–Ω–æ–≤ –≤—ã–±—Ä–∞–Ω–æ: {len(templates)}")
    print(f"ID —à–∞–±–ª–æ–Ω–æ–≤: {template_ids}")
    print("\n–î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–º–µ–Ω—ã:")
    for key, value in data.items():
        print(f"  {{ {key} }} = '{value}'")
    print()

    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤
    with tempfile.TemporaryDirectory() as temp_dir:
        generated_files = []
        used_filenames = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏–º–µ–Ω
        base_timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')

        for template_idx, template in enumerate(templates):
            print(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–±–ª–æ–Ω–∞ #{template_idx + 1}: '{template.name}' (ID: {template.id})")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {template.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
            print(f"   –§–∞–π–ª–æ–≤ –≤ —à–∞–±–ª–æ–Ω–µ: {len(template.files)}")

            if not template.files:
                print(f"   ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í —à–∞–±–ª–æ–Ω–µ '{template.name}' –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤!")
                continue

            for file_idx, template_file in enumerate(template.files):
                template_path = os.path.join(app.config['UPLOAD_FOLDER'], template_file.filename)

                print(f"\n   üìÅ –§–∞–π–ª #{file_idx + 1} –≤ —à–∞–±–ª–æ–Ω–µ:")
                print(f"      ID —Ñ–∞–π–ª–∞ –≤ –ë–î: {template_file.id}")
                print(f"      –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è: {template_file.original_filename}")
                print(f"      –°–∏—Å—Ç–µ–º–Ω–æ–µ –∏–º—è: {template_file.filename}")
                print(f"      –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {template_path}")
                print(f"      –î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {template_file.uploaded_at}")

                if not os.path.exists(template_path):
                    print(f"      ‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                    flash(f'–§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {template_file.original_filename}', 'error')
                    continue

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞
                file_size = os.path.getsize(template_path)
                file_hash = calculate_file_hash(template_path)
                print(f"      üìä –†–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
                print(f"      üîê MD5 –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {file_hash}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                try:
                    doc_preview = debug_file_contents(template_path, 200)
                    print(f"      üìÑ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä: {doc_preview}")
                except Exception as e:
                    print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {e}")

                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                output_filename = template_file.original_filename

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                counter = 1
                base_name = os.path.splitext(output_filename)[0]
                extension = os.path.splitext(output_filename)[1]

                while output_filename in used_filenames:
                    output_filename = f"{base_name}_{counter:02d}{extension}"
                    counter += 1

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö
                used_filenames.add(output_filename)
                output_path = os.path.join(temp_dir, output_filename)

                print(f"      üì§ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_filename}")

                try:
                    print(f"      üîÑ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
                    file_extension = os.path.splitext(template_file.original_filename)[1].lower()
                    print(f"      üìÑ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: '{file_extension}'")

                    if file_extension == '.docx':
                        print(f"      üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ Word –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É Word –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                        success = process_docx_template_safe(template_path, output_path, data)
                        if not success:
                            print(f"      ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å Word –¥–æ–∫—É–º–µ–Ω—Ç")
                            flash(f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Word –¥–æ–∫—É–º–µ–Ω—Ç–∞: {template_file.original_filename}', 'error')
                            continue
                    elif file_extension == '.xlsx':
                        print(f"      üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–∞")
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å openpyxl
                        try:
                            import openpyxl
                        except ImportError:
                            print(f"      ‚ùå openpyxl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                            flash(
                                '–î–ª—è —Ä–∞–±–æ—Ç—ã —Å Excel —Ñ–∞–π–ª–∞–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É openpyxl: pip install openpyxl',
                                'error')
                            continue

                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É Excel —Ñ–∞–π–ª–æ–≤
                        success = process_xlsx_template(template_path, output_path, data)
                        if not success:
                            print(f"      ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å Excel —Ñ–∞–π–ª")
                            flash(f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel —Ñ–∞–π–ª–∞: {template_file.original_filename}', 'error')
                            continue
                    else:
                        print(f"      ‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file_extension}")
                        flash(
                            f'–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {template_file.original_filename} (—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {file_extension})',
                            'error')
                        continue

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω
                    if os.path.exists(output_path):
                        file_size = os.path.getsize(output_path)
                        output_hash = calculate_file_hash(output_path)
                        generated_files.append(output_path)
                        print(f"      ‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –†–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
                        print(f"      üîê MD5 –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {output_hash}")

                        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ö—ç—à–∏
                        if output_hash == file_hash:
                            print(f"      ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –∏–¥–µ–Ω—Ç–∏—á–µ–Ω –∏—Å—Ö–æ–¥–Ω–æ–º—É (–∑–∞–º–µ–Ω—ã –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ)")
                        else:
                            print(f"      ‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (—Ö—ç—à –∏–∑–º–µ–Ω–∏–ª—Å—è)")

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                        try:
                            output_preview = debug_file_contents(output_path, 200)
                            print(f"      üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {output_preview}")
                        except Exception as e:
                            print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
                    else:
                        print(f"      ‚ùå –§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω!")
                        flash(f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è {template_file.original_filename}', 'error')

                except Exception as e:
                    print(f"      üí• –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")
                    print("      üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
                    import traceback
                    traceback.print_exc()
                    flash(
                        f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {template_file.original_filename} –∏–∑ —à–∞–±–ª–æ–Ω–∞ {template.name}: {str(e)}',
                        'error')
                    continue

        print(f"\nüìä –ò–¢–û–ì–ò –ì–ï–ù–ï–†–ê–¶–ò–ò:")
        print(f"   –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(generated_files)}")

        if generated_files:
            print("   üìã –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")
            for i, file_path in enumerate(generated_files, 1):
                file_name = os.path.basename(file_path)
                file_size = os.path.getsize(file_path)
                print(f"      {i}. {file_name} ({file_size} –±–∞–π—Ç)")

            # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ —Å –ø—Ä–æ—Å—Ç—ã–º –∏–º–µ–Ω–µ–º
            archive_name = f"contracts_{base_timestamp}.zip"
            archive_path = os.path.join(app.config['OUTPUT_FOLDER'], archive_name)

            print(f"\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞: {archive_name}")
            try:
                with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                    for file_path in generated_files:
                        file_name = os.path.basename(file_path)
                        zipf.write(file_path, file_name)
                        print(f"      ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ –∞—Ä—Ö–∏–≤: {file_name}")

                archive_size = os.path.getsize(archive_path)
                print(f"üì¶ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ! –†–∞–∑–º–µ—Ä: {archive_size} –±–∞–π—Ç")
                return send_file(archive_path, as_attachment=True, download_name=archive_name)

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: {e}")
                flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: {str(e)}', 'error')
                return redirect(url_for('contracts'))
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
            flash('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —à–∞–±–ª–æ–Ω—ã –∏ –¥–∞–Ω–Ω—ã–µ.', 'error')
            return redirect(url_for('contracts'))